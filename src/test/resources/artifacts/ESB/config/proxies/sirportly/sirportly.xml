<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="sirportly"
       transports="https,http"
       statistics="disable"
       trace="disable"
       startOnLoad="true">
    <target>
        <inSequence>
            <property name="apiUrl" expression="json-eval($.apiUrl)"/>
            <property name="apiToken" expression="json-eval($.apiToken)"/>
            <property name="apiSecret" expression="json-eval($.apiSecret)"/>
            <property name="contact" expression="json-eval($.contact)"/>
            <property name="contactName" expression="json-eval($.contactName)"/>
            <property name="contactReference" expression="json-eval($.contactReference)"/>
            <property name="company" expression="json-eval($.company)"/>
            <property name="priority" expression="json-eval($.priority)"/>
            <property name="page" expression="json-eval($.page)"/>
            <property name="query" expression="json-eval($.query)"/>
            <property name="limit" expression="json-eval($.limit)"/>
            <property name="types" expression="json-eval($.types)"/>
            <property name="contactMethodType" expression="json-eval($.contactMethodType)"/>
            <property name="contactData" expression="json-eval($.contactData)"/>
            <property name="isDefault" expression="json-eval($.isDefault)"/>
            <property name="user" expression="json-eval($.user)"/>
            <property name="isRetrieveTimers" expression="json-eval($.isRetrieveTimers)"/>
            <property name="filter" expression="json-eval($.filter)"/>
            <property name="conditions" expression="json-eval($.conditions)"/>
            <property name="subject" expression="json-eval($.subject)"/>
            <property name="status" expression="json-eval($.status)"/>
            <property name="assignedUser" expression="json-eval($.assignedUser)"/>
            <property name="brand" expression="json-eval($.brand)"/>
            <property name="department" expression="json-eval($.department)"/>
            <property name="team" expression="json-eval($.team)"/>
            <property name="contactMethodData" expression="json-eval($.contactMethodData)"/>
            <property name="sortBy" expression="json-eval($.sortBy)"/>
            <property name="orderBy" expression="json-eval($.orderBy)"/>
            <property name="departmentId" expression="json-eval($.departmentId)"/>
            <property name="ticketReference" expression="json-eval($.ticketReference)"/>
            <property name="message" expression="json-eval($.message)"/>
            <property name="isAuthenticated" expression="json-eval($.isAuthenticated)"/>
            <property name="postedAt" expression="json-eval($.postedAt)"/>
            <sirportly.init>
                <apiUrl>{$ctx:apiUrl}</apiUrl>
                <apiToken>{$ctx:apiToken}</apiToken>
                <apiSecret>{$ctx:apiSecret}</apiSecret>
            </sirportly.init>
            <switch source="get-property('transport', 'Action')">
                <case regex="urn:getContact">
                    <sirportly.getContact>
                        <contact>{$ctx:contact}</contact>
                    </sirportly.getContact>
                </case>
                <case regex="urn:createContact">
                    <sirportly.createContact>
                        <contactName>{$ctx:contactName}</contactName>
                        <contactReference>{$ctx:contactReference}</contactReference>
                        <company>{$ctx:company}</company>
                        <priority>{$ctx:priority}</priority>
                    </sirportly.createContact>
                </case>
                <case regex="urn:listContacts">
                    <sirportly.listContacts>
                        <page>{$ctx:page}</page>
                    </sirportly.listContacts>
                </case>
                <case regex="urn:searchContacts">
                    <sirportly.searchContacts>
                        <query>{$ctx:query}</query>
                        <limit>{$ctx:limit}</limit>
                        <types>{$ctx:types}</types>
                    </sirportly.searchContacts>
                </case>
                <case regex="urn:addContactMethod">
                    <sirportly.addContactMethod>
                        <contact>{$ctx:contact}</contact>
                        <contactMethodType>{$ctx:contactMethodType}</contactMethodType>
                        <contactData>{$ctx:contactData}</contactData>
                        <isDefault>{$ctx:isDefault}</isDefault>
                    </sirportly.addContactMethod>
                </case>
                <case regex="urn:getUser">
                    <sirportly.getUser>
                        <user>{$ctx:user}</user>
                    </sirportly.getUser>
                </case>
                <case regex="urn:getTicket">
                    <sirportly.getTicket>
                        <ticketReference>{$ctx:ticketReference}</ticketReference>
                        <isRetrieveTimers>{$ctx:isRetrieveTimers}</isRetrieveTimers>
                    </sirportly.getTicket>
                </case>
                <case regex="urn:listTicketsByFilter">
                    <sirportly.listTicketsByFilter>
                        <filter>{$ctx:filter}</filter>
                        <conditions>{$ctx:conditions}</conditions>
                    </sirportly.listTicketsByFilter>
                </case>
                <case regex="urn:createTicket">
                    <sirportly.createTicket>
                        <subject>{$ctx:subject}</subject>
                        <status>{$ctx:status}</status>
                        <priority>{$ctx:priority}</priority>
                        <assignedUser>{$ctx:assignedUser}</assignedUser>
                        <brand>{$ctx:brand}</brand>
                        <department>{$ctx:department}</department>
                        <team>{$ctx:team}</team>
                        <contact>{$ctx:contact}</contact>
                        <contactMethodType>{$ctx:contactMethodType}</contactMethodType>
                        <contactMethodData>{$ctx:contactMethodData}</contactMethodData>
                        <contactName>{$ctx:contactName}</contactName>
                    </sirportly.createTicket>
                </case>
                <case regex="urn:listTickets">
                    <sirportly.listTickets>
                        <page>{$ctx:page}</page>
                        <sortBy>{$ctx:sortBy}</sortBy>
                        <orderBy>{$ctx:orderBy}</orderBy>
                    </sirportly.listTickets>
                </case>
                <case regex="urn:updateTicket">
                    <sirportly.updateTicket>
                        <ticketReference>{$ctx:ticketReference}</ticketReference>
                        <departmentId>{$ctx:departmentId}</departmentId>
                        <priority>{$ctx:priority}</priority>
                        <status>{$ctx:status}</status>
                        <assignedUser>{$ctx:assignedUser}</assignedUser>
                        <subject>{$ctx:subject}</subject>
                    </sirportly.updateTicket>
                </case>
                <case regex="urn:addContentToTicket">
                    <sirportly.addContentToTicket>
                        <ticketReference>{$ctx:ticketReference}</ticketReference>
                        <message>{$ctx:message}</message>
                        <subject>{$ctx:subject}</subject>
                        <isAuthenticated>{$ctx:isAuthenticated}</isAuthenticated>
                        <postedAt>{$ctx:postedAt}</postedAt>
                    </sirportly.addContentToTicket>
                </case>
                <case regex="urn:searchTickets">
                    <sirportly.searchTickets>
                        <query>{$ctx:query}</query>
                        <page>{$ctx:page}</page>
                    </sirportly.searchTickets>
                </case>
            </switch>
            <respond/>
        </inSequence>
        <outSequence>
            <log/>
            <send/>
        </outSequence>
    </target>
    <description/>
</proxy>